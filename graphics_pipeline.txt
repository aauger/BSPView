
BSP traversal:

-- Traverse the bsp tree recursively.  For each branch in the bsp tree, check if the camera is in front of the splitting plane.  If the camera is in front of the splitting plane, traverse the front of the bsp tree first, otherwise traverse the back first.

-- This traversal gives us perfect front-to-back sorting of the convex sectors which are stored in the leaf nodes.
-- Each leaf-node/sector visited in this order gets sent to the Sector processing module. 


Sector processing:

- For each wall in the sector, transform relative to the camera (e.g. wall.pt1.x - camera.x, wall.pt1.y - camera.y), and rotate according to the camera's rotation.
-- All walls are stored in clockwise order, so once rotated, we can check if the wall is backfacing after rotation with a simple comparison.
-- Once transformed relative to the camera, clip the walls in 3d camera space against the viewport (could this be improved with proper frustum culling?)
-- Perform perspective projection on clipped walls.  (TODO: add yaw for look up and down?)

-- Send clipped and projected walls to the Span processing module.

-- addendum: for portals, we calculate the perspective projection of the backside (i.e. the lower and upper parts of the portal in the sector the portal is connected to)


Span processing:

-- Maintain a linked list of 1d spans of all the space on the screen that hasn't been drawn to with an fully opaque wall (i.e. not a portal).

-- For each opaque (not a portal) wall, iterate over the linked list, intersecting the wall with any non-drawn spans, and sending those clipped intersections to the Span interpolation module. 
-- For each intersection against a span in the buffer, cut out that chunk of span from the buffer (sometimes deleting the entry entirely), so that this buffer becomes smaller and gets more efficient as more things are drawn to the screen.

-- For each portal wall, perform the same exact intersections, but do not modify the linked list entries.



Span interpolation:
-- Interpolates between wall heights, maintains a 2d clipping buffer for portals, and draws columns. 

-- For opaque walls: Calculate the height of the clipped span edges.  Interpolate between these wall heights,
---- for each x:
----- draw column from max(current_top_of_wall, ytop[x]) to min(current_bottom_of_wall, ybot[x])

-- For portals: Calculate the height of the clipped span edges (for the front and backside of the portal).  Interpolate between these heights.
---- for each x:
------ if the lower step is above ybot[x], draw the lower step.  Update ybot[x] to the top of the lower step    
------ if the upper step is below ytop[x], draw the upper step.  Update ytop[x] to the bottom of the upper step.
